<?php

use Fisharebest\Webtrees\I18N;
use Fisharebest\Webtrees\View;

//adapted from location-edit.phtml

/**
 * @var float                $latitude
 * @var float                $longitude
 * @var array<array<float>>  $map_bounds
 * @var <array<float>        $marker_position
 * @var mixed                $provider
 * @var string               $locationName
 */

?>

<?php View::push('styles') ?>
<style>
    .osm-admin-map {
        height: 55vh;
        border: 1px solid darkGrey
    }
</style>
<?php View::endpush() ?>

<?php View::push('javascript') ?>
<script>
    'use strict';

    //adapted from webtrees.js reformatLatLong
    function osm2webtrees(val, pos, neg) {
      var txt = ''+val;
      txt = txt.replace(/-/g, neg); // -0.5698 ==> W0.5698
      // 17.1234 ==> N17.1234
      if (txt && txt.charAt(0) !== neg && txt.charAt(0) !== pos) {
        txt = pos + txt;
      }
      return txt;
    }
  
    function webtrees2osm(val) {
      var txt = ''+val;
      txt = txt.replace(/N/g, '');
      txt = txt.replace(/S/g, '-');
      txt = txt.replace(/E/g, '');
      txt = txt.replace(/W/g, '-');
      var ret = Number(txt);
      if (isNaN(ret)) {
        return 0;
      }
      return ret;
    }
    
    window.WT_OSM_ADMIN = (function () {
        const minZoom = 2;

        let provider = <?= json_encode($provider) ?>;
        let map = null;
        let add_place = <?= 'false' ?>;

        // map components

        // postcss_image_inliner breaks the autodetection of image paths.
        L.Icon.Default.imagePath = <?= json_encode(asset('css/images/')) ?>;

        // draggable marker
        let marker = L.marker(<?= json_encode($marker_position) ?>, {
            draggable: true,
        })
            .on('dragend', function () {
                let coords = marker.getLatLng();
                map.panTo(coords);
                $('[id^=LATI]').val(osm2webtrees(Number(coords.lat).toFixed(5), 'N', 'S'));
                $('[id^=LONG]').val(osm2webtrees(Number(coords.lng).toFixed(5), 'E', 'W'));
                $('#new_zoom_factor').val(Number(map.getZoom()));
            });

        //reset map to initial state
        let resetControl = L.Control.extend({
            options: {
                position: 'topleft'
            },
            onAdd: function (map) {
                let container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');
                container.onclick = function () {
                    map.fitBounds(<?= json_encode($map_bounds) ?>, {padding: [50, 30]});
                    marker.setLatLng(<?= json_encode([$latitude, $longitude]) ?>);
                    $('form').trigger('reset');
                    return false;
                };
                let reset = <?= json_encode(I18N::translate('Reset to initial map state')) ?>;
                let anchor = L.DomUtil.create('a', 'leaflet-control-reset', container);
                anchor.setAttribute('aria-label', reset);
                anchor.href = '#';
                anchor.title = reset;
                anchor.role = 'button';
                let image = L.DomUtil.create('i', 'fas fa-redo', anchor);
                image.alt = reset;

                return container;
            }
        });

        // zoom control with localised text
        let zoomCtl = new L.control.zoom({
            zoomInTitle:  <?= json_encode(I18N::translate('Zoom in')) ?>,
            zoomOutTitle: <?= json_encode(I18N::translate('Zoom out')) ?>,
        });

        // Geocoder (place lookup)
        let geocoder = new L.Control.geocoder({
            defaultMarkGeocode: false,
            expand: 'click',
            showResultIcons: true,
            query: <?= json_encode($locationName) ?>,
            placeholder: <?= json_encode(I18N::translate('Place')) ?>,
            errorMessage: <?= json_encode(I18N::translate('Nothing found.')) ?>,
            iconLabel: <?= json_encode(I18N::translate('Search')) ?>
        })
            .on('markgeocode', function (result) {
                let coords = result.geocode.center;
                let place = result.geocode.name.split(',', 1);
                marker.setLatLng(coords);
                map.panTo(coords);
                if (add_place) {
                    $('#new_place_name').val(place.shift());
                }
                $('[id^=LATI]').val(osm2webtrees(Number(coords.lat).toFixed(5), 'N', 'S'));
                $('[id^=LONG]').val(osm2webtrees(Number(coords.lng).toFixed(5), 'E', 'W'));
                $('#new_zoom_factor').val(Number(map.getZoom()));
            });

        /**
         *
         * @private
         */
        $(function () {
            // geocoder button tooltip
            $('.leaflet-control-geocoder-icon')
                .attr('title', <?= json_encode(I18N::translate('Search')) ?>);

            $('[id^=LATI]').on('change', function () {
                let lat = webtrees2osm($('[id^=LATI]').val());
                let lng = webtrees2osm($('[id^=LONG]').val());
                marker.setLatLng([lat, lng]);
                map.panTo([lat, lng]);
            });
            
            $('[id^=LONG]').on('change', function () {
                let lat = webtrees2osm($('[id^=LATI]').val());
                let lng = webtrees2osm($('[id^=LONG]').val());
                marker.setLatLng([lat, lng]);
                map.panTo([lat, lng]);
            });
        });

        // Create the map with all controls and layers
        map = L.map('osm-map', {
            minZoom: minZoom, // maxZoom set by leaflet-providers.js
            zoomControl: false,   // remove default
        })
            .addControl(new resetControl())
            .addControl(zoomCtl)
            .addControl(geocoder)
            .addLayer(marker)
            .addLayer(L.tileLayer(provider.url, provider.options))
            .fitBounds(<?= json_encode($map_bounds) ?>, {padding: [50, 30]})
            .on('zoomend', function () {
                $('#new_zoom_factor').val(map.getZoom());
            });

        return 'Leaflet map interface for webtrees-2';
    })();
</script>
<?php View::endpush() ?>
